#!/usr/bin/env python3
import os
import subprocess
import sys

APP_IMAGE_NAME = 'automated_backup_utilities'
DEFAULT_COMPOSE_NAME = 'automated_backup_utilities_prod'

IMAGE_NAMES = [
    APP_IMAGE_NAME,
]


def get_compose_name():
    compose_name = os.environ.get('COMPOSE_NAME', DEFAULT_COMPOSE_NAME)
    return compose_name


def run_command(command):
    subprocess.call(command, shell=True)


def get_repo_root():
    return subprocess.check_output('git rev-parse --show-toplevel'.split(),
                                   encoding='utf-8').strip()


def stop():
    print("Stopping services...")
    run_command(f'docker-compose -p {get_compose_name()} stop')


def main():
    command = sys.argv[1]

    repo_root = get_repo_root()
    app_dockerfile_path = os.path.join(
        repo_root,
        'Dockerfile',
    )

    compose_name = get_compose_name()

    if command == 'build':
        print("Building services...")

        run_command(f"""
            cd {repo_root} && \ 
                docker build -f {app_dockerfile_path} -t {APP_IMAGE_NAME}:latest .
        """)

    if command == 'push':
        registry = sys.argv[2]

        for image_name in IMAGE_NAMES:
            run_command(
                f'''docker tag {image_name}:latest {registry}/{image_name}''')
            run_command(f'docker push {registry}/{image_name}')

    if command == 'pull':
        registry = sys.argv[2]

        for image_name in IMAGE_NAMES:
            run_command(f'docker pull {registry}/{image_name}')
            run_command(
                f'''docker tag {registry}/{image_name} {image_name}:latest''')

    if command == 'deploy':
        print("Deploying services...")
        run_command(f'docker compose -p {compose_name} up -d')

    if command == 'start':
        print("Starting services...")
        run_command(f'docker compose -p {compose_name} up')

    if command == 'stop':
        print("Stopping services...")
        stop()

    if command == 'shell':
        print("Starting up shell...")
        run_command(f'''
            docker compose -p {compose_name} run backup_utilities sh
        ''')


if __name__ == '__main__':
    main()
